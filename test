<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="/homestyle.css" />
  </head>
  <body>
    <div class="container">
      <form class="form" action="/home/home" method="post">
        <input type="text" name="search" value="" />
        <input type="submit" value="Search" />
      </form>
    </div>
    <div class="container">
      <form class="form" action="/home/logout" method="post">
        <input type="submit" value="Logout" />
      </form>
    </div>
    <div class="usernameContainer">
      <p>Username: <%= userData.username %></p>
    </div>
    <div class="mainContainer">
      <div class="leftContainer">
        <% concerts.forEach(function(concert) { %>
        <p><%= concert.name %></p>
        <!-- Display other concert details as desired -->
        <% }); %>
      </div>
      <div class="rightContainer">
        <% if (concerts && concerts.length > 0) { %> <%
        concerts.forEach(function(concert) { %>
        <div>
          <h2><%= concert.name %></h2>
          <% concert.linkedUserConcerts.forEach(function(linkedUserConcert) { %>
          <% if (linkedUserConcert.User) { %>
          <p>Username: <%= linkedUserConcert.User.username %></p>
          <% } %> <% }); %>
        </div>
        <% }); %> <% } else { %>
        <p>No concerts available.</p>
        <% } %>
      </div>
    </div>
  </body>
</html>

const express = require("express"); const router = express.Router(); const ejs =
require("ejs"); const { Users } = require("../../models"); const { Concerts } =
require("../../models"); const { linkedUserConcerts } = require("../../models");
const { cookieJwtAuth } = require("../../middleware/cookieJwtAuth"); const
jwtDecode = require("jwt-decode"); const fetchUserData = async (userId) => { try
{ // Retrieve the user data from the database based on the userId const userData
= await Users.findOne({ where: { id: userId } }); console.log(userData); return
userData; } catch (error) { console.log("Error fetching user data:", error);
throw error; } }; router.get("/", cookieJwtAuth, async (req, res) => { try {
const token = req.cookies.token; const decodedToken = jwtDecode(token); const
userId = decodedToken.userId; const userData = await fetchUserData(userId);
const concerts = await Concerts.findAll({ include: [ { model:
linkedUserConcerts, include: [Users], }, ], where: {
"$linkedUserConcerts.userId$": userId, }, }); res.render("./home/home.ejs", {
concerts, userData: userData }); console.log(concerts); } catch (error) {
console.error("Error retrieving user concerts:", error);
res.status(500).send("Error retrieving user concerts"); } // const userData =
await fetchUserData(userId); // res.render("./home/home.ejs", { userData:
userData }); // } catch (error) { // // Handle any errors that occur during the
process // console.log("Error:", error); // res.status(500).send("Internal
Server Error"); // } }); router.post("/home", cookieJwtAuth, async (req, res) =>
{ res.redirect("/searchResults"); }); router.post("/logout", function (req, res)
{ res.clearCookie("token"); res.redirect("/login"); }); module.exports = router;
